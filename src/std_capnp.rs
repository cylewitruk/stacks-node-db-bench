// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: std.capnp


pub mod optional { /* T */
  pub use self::Which::{None,Some};

  #[derive(Copy, Clone)]
  pub struct Owned<T> {
    _phantom: ::core::marker::PhantomData<T>
  }
  impl <T> ::capnp::introspect::Introspect for Owned <T> where T: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T>, annotation_types: _private::get_annotation_types::<T> }).into() } }
  impl <T> ::capnp::traits::Owned for Owned <T> where T: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T>; type Builder<'a> = Builder<'a, T>; }
  impl <T> ::capnp::traits::OwnedStruct for Owned <T> where T: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T>; type Builder<'a> = Builder<'a, T>; }
  impl <T> ::capnp::traits::Pipelined for Owned<T> where T: ::capnp::traits::Owned  { type Pipeline = Pipeline<T>; }

  pub struct Reader<'a,T> where T: ::capnp::traits::Owned  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<T>
  }
  impl <'a,T> ::core::marker::Copy for Reader<'a,T> where T: ::capnp::traits::Owned  {}
  impl <'a,T> ::core::clone::Clone for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,T> ::capnp::traits::HasTypeId for Reader<'a,T> where T: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T> ::core::convert::From<Reader<'a,T>> for ::capnp::dynamic_value::Reader<'a> where T: ::capnp::traits::Owned  {
    fn from(reader: Reader<'a,T>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T>, annotation_types: _private::get_annotation_types::<T>})))
    }
  }

  impl <'a,T> ::core::fmt::Debug for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,T> ::capnp::traits::FromPointerReader<'a> for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,T> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,T> ::capnp::traits::Imbue<'a> for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,T> Reader<'a,T> where T: ::capnp::traits::Owned  {
    pub fn reborrow(&self) -> Reader<'_,T> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn has_some(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,T>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(None(
            ()
          ))
        }
        1 => {
          ::core::result::Result::Ok(Some(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a,T> where T: ::capnp::traits::Owned  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<T>
  }
  impl <'a,T> ::capnp::traits::HasStructSize for Builder<'a,T> where T: ::capnp::traits::Owned  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 1 };
  }
  impl <'a,T> ::capnp::traits::HasTypeId for Builder<'a,T> where T: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,T> where T: ::capnp::traits::Owned  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T> ::core::convert::From<Builder<'a,T>> for ::capnp::dynamic_value::Builder<'a> where T: ::capnp::traits::Owned  {
    fn from(builder: Builder<'a,T>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T>, annotation_types: _private::get_annotation_types::<T>})))
    }
  }

  impl <'a,T> ::capnp::traits::ImbueMut<'a> for Builder<'a,T> where T: ::capnp::traits::Owned  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,T> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,T> where T: ::capnp::traits::Owned  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,T> ::capnp::traits::SetterInput<Owned<T>> for Reader<'a,T> where T: ::capnp::traits::Owned  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,T> Builder<'a,T> where T: ::capnp::traits::Owned  {
    pub fn into_reader(self) -> Reader<'a,T> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,T> {
      Builder { builder: self.builder.reborrow(), ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,T> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn set_none(&mut self, _value: ())  {
      self.builder.set_data_field::<u16>(0, 0);
    }
    #[inline]
    pub fn initn_some(self, length: u32) -> <T as ::capnp::traits::Owned>::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
    }
    #[inline]
    pub fn set_some(&mut self, value: impl ::capnp::traits::SetterInput<T>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_some(self, ) -> <T as ::capnp::traits::Owned>::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
    }
    #[inline]
    pub fn has_some(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 { return false; }
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,T>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(None(
            ()
          ))
        }
        1 => {
          ::core::result::Result::Ok(Some(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline<T> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<T>
  }
  impl<T> ::capnp::capability::FromTypelessPipeline for Pipeline<T> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
    }
  }
  impl<T> Pipeline<T> where T: ::capnp::traits::Pipelined, <T as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 50] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(11, 113, 13, 48, 124, 219, 48, 221),
      ::capnp::word(10, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(1, 0, 7, 0, 0, 0, 2, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 154, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(141, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 79, 112, 116, 105, 111, 110),
      ::capnp::word(97, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 255, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 254, 255, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 109, 101, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(11, 113, 13, 48, 124, 219, 48, 221),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(84, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types<T>(index: u16) -> ::capnp::introspect::Type where T: ::capnp::traits::Owned  {
      match index {
        0 => <() as ::capnp::introspect::Introspect>::introspect(),
        1 => <T as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types<T>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where T: ::capnp::traits::Owned  {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[0,1];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
    pub const TYPE_ID: u64 = 0xdd30_db7c_300d_710b;
  }
  pub enum Which<A0> {
    None(()),
    Some(A0),
  }
  pub type WhichReader<'a,T> = Which<::capnp::Result<<T as ::capnp::traits::Owned>::Reader<'a>>>;
  pub type WhichBuilder<'a,T> = Which<::capnp::Result<<T as ::capnp::traits::Owned>::Builder<'a>>>;
}

pub mod map { /* Key,Value */
  #[derive(Copy, Clone)]
  pub struct Owned<Key,Value> {
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <Key,Value> ::capnp::introspect::Introspect for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value> }).into() } }
  impl <Key,Value> ::capnp::traits::Owned for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
  impl <Key,Value> ::capnp::traits::OwnedStruct for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
  impl <Key,Value> ::capnp::traits::Pipelined for Owned<Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Pipeline = Pipeline<Key,Value>; }

  pub struct Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <'a,Key,Value> ::core::marker::Copy for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {}
  impl <'a,Key,Value> ::core::clone::Clone for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,Key,Value> ::capnp::traits::HasTypeId for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,Key,Value> ::core::convert::From<Reader<'a,Key,Value>> for ::capnp::dynamic_value::Reader<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(reader: Reader<'a,Key,Value>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
    }
  }

  impl <'a,Key,Value> ::core::fmt::Debug for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,Key,Value> ::capnp::traits::FromPointerReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,Key,Value> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,Key,Value> ::capnp::traits::Imbue<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,Key,Value> Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    pub fn reborrow(&self) -> Reader<'_,Key,Value> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_entries(self) -> ::capnp::Result<::capnp::struct_list::Reader<'a,crate::std_capnp::map::entry::Owned<Key,Value>>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_entries(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
  }

  pub struct Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl <'a,Key,Value> ::capnp::traits::HasStructSize for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 1 };
  }
  impl <'a,Key,Value> ::capnp::traits::HasTypeId for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,Key,Value> ::core::convert::From<Builder<'a,Key,Value>> for ::capnp::dynamic_value::Builder<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn from(builder: Builder<'a,Key,Value>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
    }
  }

  impl <'a,Key,Value> ::capnp::traits::ImbueMut<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,Key,Value> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,Key,Value> ::capnp::traits::SetterInput<Owned<Key,Value>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,Key,Value> Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
    pub fn into_reader(self) -> Reader<'a,Key,Value> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,Key,Value> {
      Builder { builder: self.builder.reborrow(), ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,Key,Value> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_entries(self) -> ::capnp::Result<::capnp::struct_list::Builder<'a,crate::std_capnp::map::entry::Owned<Key,Value>>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_entries(&mut self, value: ::capnp::struct_list::Reader<'_,crate::std_capnp::map::entry::Owned<Key,Value>>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_entries(self, size: u32) -> ::capnp::struct_list::Builder<'a,crate::std_capnp::map::entry::Owned<Key,Value>> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), size)
    }
    #[inline]
    pub fn has_entries(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
  }

  pub struct Pipeline<Key,Value> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<(Key,Value)>
  }
  impl<Key,Value> ::capnp::capability::FromTypelessPipeline for Pipeline<Key,Value> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
    }
  }
  impl<Key,Value> Pipeline<Key,Value> where Key: ::capnp::traits::Pipelined, <Key as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, Value: ::capnp::traits::Pipelined, <Value as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 48] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(5, 15, 72, 52, 75, 152, 232, 245),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(1, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 114, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 63, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(125, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 77, 97, 112, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(88, 40, 175, 74, 228, 221, 200, 207),
      ::capnp::word(1, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(69, 110, 116, 114, 121, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(56, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(101, 110, 116, 114, 105, 101, 115, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(88, 40, 175, 74, 228, 221, 200, 207),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(4, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 15, 72, 52, 75, 152, 232, 245),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 50, 0, 0, 0),
      ::capnp::word(75, 101, 121, 0, 0, 0, 0, 0),
      ::capnp::word(86, 97, 108, 117, 101, 0, 0, 0),
    ];
    pub fn get_field_types<Key,Value>(index: u16) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      match index {
        0 => <::capnp::struct_list::Owned<crate::std_capnp::map::entry::Owned<Key,Value>> as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types<Key,Value>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0];
    pub const TYPE_ID: u64 = 0xf5e8_984b_3448_0f05;
  }

  pub mod entry { /* Key,Value */
    #[derive(Copy, Clone)]
    pub struct Owned<Key,Value> {
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <Key,Value> ::capnp::introspect::Introspect for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value> }).into() } }
    impl <Key,Value> ::capnp::traits::Owned for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
    impl <Key,Value> ::capnp::traits::OwnedStruct for Owned <Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, Key,Value>; type Builder<'a> = Builder<'a, Key,Value>; }
    impl <Key,Value> ::capnp::traits::Pipelined for Owned<Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  { type Pipeline = Pipeline<Key,Value>; }

    pub struct Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      reader: ::capnp::private::layout::StructReader<'a>,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <'a,Key,Value> ::core::marker::Copy for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {}
    impl <'a,Key,Value> ::core::clone::Clone for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn clone(&self) -> Self { *self }
    }

    impl <'a,Key,Value> ::capnp::traits::HasTypeId for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
        Self { reader, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,Key,Value> ::core::convert::From<Reader<'a,Key,Value>> for ::capnp::dynamic_value::Reader<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(reader: Reader<'a,Key,Value>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
      }
    }

    impl <'a,Key,Value> ::core::fmt::Debug for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
        core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
      }
    }

    impl <'a,Key,Value> ::capnp::traits::FromPointerReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(reader.get_struct(default)?.into())
      }
    }

    impl <'a,Key,Value> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,Key,Value> ::capnp::traits::Imbue<'a> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,Key,Value> Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      pub fn reborrow(&self) -> Reader<'_,Key,Value> {
        Self { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<Key as ::capnp::traits::Owned>::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<Value as ::capnp::traits::Owned>::Reader<'a>> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      builder: ::capnp::private::layout::StructBuilder<'a>,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl <'a,Key,Value> ::capnp::traits::HasStructSize for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
    }
    impl <'a,Key,Value> ::capnp::traits::HasTypeId for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl <'a,Key,Value> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
        Self { builder, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,Key,Value> ::core::convert::From<Builder<'a,Key,Value>> for ::capnp::dynamic_value::Builder<'a> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn from(builder: Builder<'a,Key,Value>) -> Self {
        Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<Key,Value>, annotation_types: _private::get_annotation_types::<Key,Value>})))
      }
    }

    impl <'a,Key,Value> ::capnp::traits::ImbueMut<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,Key,Value> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
        builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
        ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
      }
    }

    impl <'a,Key,Value> ::capnp::traits::SetterInput<Owned<Key,Value>> for Reader<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,Key,Value> Builder<'a,Key,Value> where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
      pub fn into_reader(self) -> Reader<'a,Key,Value> {
        self.builder.into_reader().into()
      }
      pub fn reborrow(&mut self) -> Builder<'_,Key,Value> {
        Builder { builder: self.builder.reborrow(), ..*self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,Key,Value> {
        self.builder.as_reader().into()
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<Key as ::capnp::traits::Owned>::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_key(self, length: u32) -> <Key as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
      }
      #[inline]
      pub fn set_key(&mut self, value: impl ::capnp::traits::SetterInput<Key>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_key(self, ) -> <Key as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
      }
      #[inline]
      pub fn has_key(&self) -> bool {
        !self.builder.is_pointer_field_null(0)
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<Value as ::capnp::traits::Owned>::Builder<'a>> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_value(self, length: u32) -> <Value as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).initn_as(length)
      }
      #[inline]
      pub fn set_value(&mut self, value: impl ::capnp::traits::SetterInput<Value>) -> ::capnp::Result<()> {
        ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_value(self, ) -> <Value as ::capnp::traits::Owned>::Builder<'a> {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).init_as()
      }
      #[inline]
      pub fn has_value(&self) -> bool {
        !self.builder.is_pointer_field_null(1)
      }
    }

    pub struct Pipeline<Key,Value> {
      _typeless: ::capnp::any_pointer::Pipeline,
      _phantom: ::core::marker::PhantomData<(Key,Value)>
    }
    impl<Key,Value> ::capnp::capability::FromTypelessPipeline for Pipeline<Key,Value> {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
        Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
      }
    }
    impl<Key,Value> Pipeline<Key,Value> where Key: ::capnp::traits::Pipelined, <Key as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, Value: ::capnp::traits::Pipelined, <Value as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
      pub fn get_key(&self) -> <Key as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
      pub fn get_value(&self) -> <Value as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      pub static ENCODED_NODE: [::capnp::Word; 47] = [
        ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
        ::capnp::word(88, 40, 175, 74, 228, 221, 200, 207),
        ::capnp::word(14, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(5, 15, 72, 52, 75, 152, 232, 245),
        ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(21, 0, 0, 0, 162, 0, 0, 0),
        ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
        ::capnp::word(112, 58, 77, 97, 112, 46, 69, 110),
        ::capnp::word(116, 114, 121, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
        ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
        ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
        ::capnp::word(107, 101, 121, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(5, 15, 72, 52, 75, 152, 232, 245),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(118, 97, 108, 117, 101, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
        ::capnp::word(5, 15, 72, 52, 75, 152, 232, 245),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ];
      pub fn get_field_types<Key,Value>(index: u16) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
        match index {
          0 => <Key as ::capnp::introspect::Introspect>::introspect(),
          1 => <Value as ::capnp::introspect::Introspect>::introspect(),
          _ => panic!("invalid field index {}", index),
        }
      }
      pub fn get_annotation_types<Key,Value>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where Key: ::capnp::traits::Owned, Value: ::capnp::traits::Owned  {
        panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
      }
      pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
        encoded_node: &ENCODED_NODE,
        nonunion_members: NONUNION_MEMBERS,
        members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
        members_by_name: MEMBERS_BY_NAME,
      };
      pub static NONUNION_MEMBERS : &[u16] = &[0,1];
      pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
      pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
      pub const TYPE_ID: u64 = 0xcfc8_dde4_4aaf_2858;
    }
  }
}

pub mod tuple { /* T1,T2 */
  #[derive(Copy, Clone)]
  pub struct Owned<T1,T2> {
    _phantom: ::core::marker::PhantomData<(T1,T2)>
  }
  impl <T1,T2> ::capnp::introspect::Introspect for Owned <T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2>, annotation_types: _private::get_annotation_types::<T1,T2> }).into() } }
  impl <T1,T2> ::capnp::traits::Owned for Owned <T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T1,T2>; type Builder<'a> = Builder<'a, T1,T2>; }
  impl <T1,T2> ::capnp::traits::OwnedStruct for Owned <T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T1,T2>; type Builder<'a> = Builder<'a, T1,T2>; }
  impl <T1,T2> ::capnp::traits::Pipelined for Owned<T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  { type Pipeline = Pipeline<T1,T2>; }

  pub struct Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<(T1,T2)>
  }
  impl <'a,T1,T2> ::core::marker::Copy for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {}
  impl <'a,T1,T2> ::core::clone::Clone for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,T1,T2> ::capnp::traits::HasTypeId for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T1,T2> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T1,T2> ::core::convert::From<Reader<'a,T1,T2>> for ::capnp::dynamic_value::Reader<'a> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn from(reader: Reader<'a,T1,T2>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2>, annotation_types: _private::get_annotation_types::<T1,T2>})))
    }
  }

  impl <'a,T1,T2> ::core::fmt::Debug for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,T1,T2> ::capnp::traits::FromPointerReader<'a> for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,T1,T2> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,T1,T2> ::capnp::traits::Imbue<'a> for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,T1,T2> Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    pub fn reborrow(&self) -> Reader<'_,T1,T2> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_t1(self) -> ::capnp::Result<<T1 as ::capnp::traits::Owned>::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t1(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_t2(self) -> ::capnp::Result<<T2 as ::capnp::traits::Owned>::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t2(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
  }

  pub struct Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<(T1,T2)>
  }
  impl <'a,T1,T2> ::capnp::traits::HasStructSize for Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 2 };
  }
  impl <'a,T1,T2> ::capnp::traits::HasTypeId for Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T1,T2> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T1,T2> ::core::convert::From<Builder<'a,T1,T2>> for ::capnp::dynamic_value::Builder<'a> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn from(builder: Builder<'a,T1,T2>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2>, annotation_types: _private::get_annotation_types::<T1,T2>})))
    }
  }

  impl <'a,T1,T2> ::capnp::traits::ImbueMut<'a> for Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,T1,T2> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,T1,T2> ::capnp::traits::SetterInput<Owned<T1,T2>> for Reader<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,T1,T2> Builder<'a,T1,T2> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
    pub fn into_reader(self) -> Reader<'a,T1,T2> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,T1,T2> {
      Builder { builder: self.builder.reborrow(), ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,T1,T2> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_t1(self) -> ::capnp::Result<<T1 as ::capnp::traits::Owned>::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn initn_t1(self, length: u32) -> <T1 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
    }
    #[inline]
    pub fn set_t1(&mut self, value: impl ::capnp::traits::SetterInput<T1>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_t1(self, ) -> <T1 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
    }
    #[inline]
    pub fn has_t1(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_t2(self) -> ::capnp::Result<<T2 as ::capnp::traits::Owned>::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn initn_t2(self, length: u32) -> <T2 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).initn_as(length)
    }
    #[inline]
    pub fn set_t2(&mut self, value: impl ::capnp::traits::SetterInput<T2>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_t2(self, ) -> <T2 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).init_as()
    }
    #[inline]
    pub fn has_t2(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
  }

  pub struct Pipeline<T1,T2> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<(T1,T2)>
  }
  impl<T1,T2> ::capnp::capability::FromTypelessPipeline for Pipeline<T1,T2> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
    }
  }
  impl<T1,T2> Pipeline<T1,T2> where T1: ::capnp::traits::Pipelined, <T1 as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, T2: ::capnp::traits::Pipelined, <T2 as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
    pub fn get_t1(&self) -> <T1 as ::capnp::traits::Pipelined>::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_t2(&self) -> <T2 as ::capnp::traits::Pipelined>::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 51] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(190, 222, 102, 49, 105, 240, 174, 153),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 130, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 84, 117, 112, 108, 101, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(190, 222, 102, 49, 105, 240, 174, 153),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(190, 222, 102, 49, 105, 240, 174, 153),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(5, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(84, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 50, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types<T1,T2>(index: u16) -> ::capnp::introspect::Type where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
      match index {
        0 => <T1 as ::capnp::introspect::Introspect>::introspect(),
        1 => <T2 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types<T1,T2>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned  {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1];
    pub const TYPE_ID: u64 = 0x99ae_f069_3166_debe;
  }
}

pub mod thruple { /* T1,T2,T3 */
  #[derive(Copy, Clone)]
  pub struct Owned<T1,T2,T3> {
    _phantom: ::core::marker::PhantomData<(T1,T2,T3)>
  }
  impl <T1,T2,T3> ::capnp::introspect::Introspect for Owned <T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2,T3>, annotation_types: _private::get_annotation_types::<T1,T2,T3> }).into() } }
  impl <T1,T2,T3> ::capnp::traits::Owned for Owned <T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T1,T2,T3>; type Builder<'a> = Builder<'a, T1,T2,T3>; }
  impl <T1,T2,T3> ::capnp::traits::OwnedStruct for Owned <T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  { type Reader<'a> = Reader<'a, T1,T2,T3>; type Builder<'a> = Builder<'a, T1,T2,T3>; }
  impl <T1,T2,T3> ::capnp::traits::Pipelined for Owned<T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  { type Pipeline = Pipeline<T1,T2,T3>; }

  pub struct Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    reader: ::capnp::private::layout::StructReader<'a>,
    _phantom: ::core::marker::PhantomData<(T1,T2,T3)>
  }
  impl <'a,T1,T2,T3> ::core::marker::Copy for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {}
  impl <'a,T1,T2,T3> ::core::clone::Clone for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::HasTypeId for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T1,T2,T3> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T1,T2,T3> ::core::convert::From<Reader<'a,T1,T2,T3>> for ::capnp::dynamic_value::Reader<'a> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn from(reader: Reader<'a,T1,T2,T3>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2,T3>, annotation_types: _private::get_annotation_types::<T1,T2,T3>})))
    }
  }

  impl <'a,T1,T2,T3> ::core::fmt::Debug for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::FromPointerReader<'a> for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::Imbue<'a> for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,T1,T2,T3> Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    pub fn reborrow(&self) -> Reader<'_,T1,T2,T3> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_t1(self) -> ::capnp::Result<<T1 as ::capnp::traits::Owned>::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t1(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_t2(self) -> ::capnp::Result<<T2 as ::capnp::traits::Owned>::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t2(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_t3(self) -> ::capnp::Result<<T3 as ::capnp::traits::Owned>::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_t3(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
  }

  pub struct Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    builder: ::capnp::private::layout::StructBuilder<'a>,
    _phantom: ::core::marker::PhantomData<(T1,T2,T3)>
  }
  impl <'a,T1,T2,T3> ::capnp::traits::HasStructSize for Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 0, pointers: 3 };
  }
  impl <'a,T1,T2,T3> ::capnp::traits::HasTypeId for Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,T1,T2,T3> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder, _phantom: ::core::marker::PhantomData, }
    }
  }

  impl <'a,T1,T2,T3> ::core::convert::From<Builder<'a,T1,T2,T3>> for ::capnp::dynamic_value::Builder<'a> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn from(builder: Builder<'a,T1,T2,T3>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<T1,T2,T3>, annotation_types: _private::get_annotation_types::<T1,T2,T3>})))
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::ImbueMut<'a> for Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,T1,T2,T3> ::capnp::traits::SetterInput<Owned<T1,T2,T3>> for Reader<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,T1,T2,T3> Builder<'a,T1,T2,T3> where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
    pub fn into_reader(self) -> Reader<'a,T1,T2,T3> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,T1,T2,T3> {
      Builder { builder: self.builder.reborrow(), ..*self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,T1,T2,T3> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_t1(self) -> ::capnp::Result<<T1 as ::capnp::traits::Owned>::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn initn_t1(self, length: u32) -> <T1 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
    }
    #[inline]
    pub fn set_t1(&mut self, value: impl ::capnp::traits::SetterInput<T1>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_t1(self, ) -> <T1 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
    }
    #[inline]
    pub fn has_t1(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_t2(self) -> ::capnp::Result<<T2 as ::capnp::traits::Owned>::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn initn_t2(self, length: u32) -> <T2 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).initn_as(length)
    }
    #[inline]
    pub fn set_t2(&mut self, value: impl ::capnp::traits::SetterInput<T2>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(1), value, false)
    }
    #[inline]
    pub fn init_t2(self, ) -> <T2 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).init_as()
    }
    #[inline]
    pub fn has_t2(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_t3(self) -> ::capnp::Result<<T3 as ::capnp::traits::Owned>::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn initn_t3(self, length: u32) -> <T3 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(2)).initn_as(length)
    }
    #[inline]
    pub fn set_t3(&mut self, value: impl ::capnp::traits::SetterInput<T3>) -> ::capnp::Result<()> {
      ::capnp::traits::SetterInput::set_pointer_builder(self.builder.reborrow().get_pointer_field(2), value, false)
    }
    #[inline]
    pub fn init_t3(self, ) -> <T3 as ::capnp::traits::Owned>::Builder<'a> {
      ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(2)).init_as()
    }
    #[inline]
    pub fn has_t3(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
  }

  pub struct Pipeline<T1,T2,T3> {
    _typeless: ::capnp::any_pointer::Pipeline,
    _phantom: ::core::marker::PhantomData<(T1,T2,T3)>
  }
  impl<T1,T2,T3> ::capnp::capability::FromTypelessPipeline for Pipeline<T1,T2,T3> {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
    }
  }
  impl<T1,T2,T3> Pipeline<T1,T2,T3> where T1: ::capnp::traits::Pipelined, <T1 as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, T2: ::capnp::traits::Pipelined, <T2 as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, T3: ::capnp::traits::Pipelined, <T3 as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
    pub fn get_t1(&self) -> <T1 as ::capnp::traits::Pipelined>::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_t2(&self) -> <T2 as ::capnp::traits::Pipelined>::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
    pub fn get_t3(&self) -> <T3 as ::capnp::traits::Pipelined>::Pipeline {
      ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
    }
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 69] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(21, 36, 224, 79, 71, 97, 72, 163),
      ::capnp::word(10, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 0, 0, 0, 31, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 84, 104, 114, 117, 112, 108),
      ::capnp::word(101, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 36, 224, 79, 71, 97, 72, 163),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(21, 36, 224, 79, 71, 97, 72, 163),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 51, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(1, 0, 2, 0, 0, 0, 0, 0),
      ::capnp::word(21, 36, 224, 79, 71, 97, 72, 163),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 0, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 26, 0, 0, 0),
      ::capnp::word(84, 49, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 50, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 51, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types<T1,T2,T3>(index: u16) -> ::capnp::introspect::Type where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
      match index {
        0 => <T1 as ::capnp::introspect::Introspect>::introspect(),
        1 => <T2 as ::capnp::introspect::Introspect>::introspect(),
        2 => <T3 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types<T1,T2,T3>(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type where T1: ::capnp::traits::Owned, T2: ::capnp::traits::Owned, T3: ::capnp::traits::Owned  {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[0,1,2];
    pub const TYPE_ID: u64 = 0xa348_6147_4fe0_2415;
  }
}

pub mod int128 {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_low(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_high(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_low(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_low(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_high(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_high(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 47] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(71, 125, 179, 9, 13, 80, 67, 228),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 138, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 73, 110, 116, 49, 50, 56),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 111, 119, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 105, 103, 104, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
    pub const TYPE_ID: u64 = 0xe443_500d_09b3_7d47;
  }
}

pub mod u_int128 {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <'a,> ::core::marker::Copy for Reader<'a,>  {}
  impl <'a,> ::core::clone::Clone for Reader<'a,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::core::fmt::Debug for Reader<'a,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_low(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_high(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 2, pointers: 0 };
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::SetterInput<Owned<>> for Reader<'a,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_low(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_low(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_high(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_high(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 47] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(148, 229, 77, 47, 201, 141, 42, 207),
      ::capnp::word(10, 0, 0, 0, 1, 0, 2, 0),
      ::capnp::word(217, 32, 148, 135, 51, 253, 217, 158),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 146, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 116, 100, 46, 99, 97, 112, 110),
      ::capnp::word(112, 58, 85, 73, 110, 116, 49, 50),
      ::capnp::word(56, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(108, 111, 119, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(104, 105, 103, 104, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,0];
    pub const TYPE_ID: u64 = 0xcf2a_8dc9_2f4d_e594;
  }
}
